# Subgraph Schema: Yield Aggregator
# Version: 1.2.1
# See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum Network {
  ARBITRUM_ONE
  AURORA
  AVALANCHE
  BSC # aka BNB Chain
  CELO
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}

#############################
##### Protocol Metadata #####
#############################

interface Protocol {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  #" Current TVL (Total Value Locked) of the entire protocol "
  #totalValueLockedUSD: BigDecimal!

  #" Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  #protocolControlledValueUSD: BigDecimal

  #" Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  #cumulativeSupplySideRevenueUSD: BigDecimal!

  #" Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  #cumulativeProtocolSideRevenueUSD: BigDecimal!

  #" All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  #cumulativeTotalRevenueUSD: BigDecimal!

  #" # of cumulative unique users "
  #cumulativeUniqueUsers: Int!

  ##### Snapshots #####

  #" Daily usage metrics for this protocol "
  #dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
  #  @derivedFrom(field: "protocol")

  #" Hourly usage metrics for this protocol "
  #hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
  #  @derivedFrom(field: "protocol")

  #" Daily financial metrics for this protocol "
  #financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")
}

type YieldAggregator implements Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Yearn v3 "
  name: String!

  " Slug of protocol, including version. e.g. yearn-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  #" Current TVL (Total Value Locked) of the entire protocol "
  #totalValueLockedUSD: BigDecimal!

  #" Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. "
  #protocolControlledValueUSD: BigDecimal

  #" Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. "
  #cumulativeSupplySideRevenueUSD: BigDecimal!

  #" Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. "
  #cumulativeProtocolSideRevenueUSD: BigDecimal!

  #" All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. "
  #cumulativeTotalRevenueUSD: BigDecimal!

  #" # of cumulative unique users "
  #cumulativeUniqueUsers: Int!

  ##### Snapshots #####

  #" Daily usage metrics for this protocol "
  #dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
  #@derivedFrom(field: "protocol")

  #" Hourly usage metrics for this protocol "
  #hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
  #@derivedFrom(field: "protocol")

  #" Daily financial metrics for this protocol "
  #financialMetrics: [FinancialsDailySnapshot!]! #@derivedFrom(field: "protocol")
  ##### Vaults #####

  #" All vaults that belong to this protocol "
  #vaults: [Vault!]! #@derivedFrom(field: "protocol")
}

type Strategy @entity {
  " Smart contract address of the strategy "
  id: ID!

  " The protocol this strategy belongs to "
  protocol: YieldAggregator!

  " Name of strategy (e.g. Onsen) "
  name: String

  " Symbol of strategy (e.g. ONS) "
  symbol: String

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  #" Vault associated to the strategy "
  #vault: Vault!

  ##### Quantitative Data #####

  #" Current TVL (Total Value Locked) of this strategy in USD "
  #totalValueLockedUSD: BigDecimal!

  " Amount of input token in the strategy "
  inputTokenBalance: BigInt!

  " Total supply of output token "
  outputTokenSupply: BigInt

  " All deposits made to this strategy "
  deposits: [Deposit!]!

  " All withdrawals made from this strategy "
  withdraws: [Withdraw!]!
}

##################################
##### Transaction-Level Data #####
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""
interface Event {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  #" Address that received tokens "
  #to: String!

  #" Address that sent tokens "
  #from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type Deposit implements Event @entity {
  " { Transaction hash }-{ Log index }-{ Network Id } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  #" Market that tokens are deposited into "
  #to: String!

  #" Address that deposited tokens "
  #from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  #" Amount of token deposited in USD "
  #amountUSD: BigDecimal!

  #" The vault involving this transaction "
  #vault: Vault!

  " The strategy this deposit belongs to "
  strategy: Strategy!
}

type Withdraw implements Event @entity {
  " { Transaction hash }-{ Log index }-{ network ID"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The protocol this transaction belongs to "
  protocol: YieldAggregator!

  #" Address that received tokens "
  #to: String!

  #" Market that tokens are withdrawn from "
  #from: String!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Token withdrawn "
  asset: Token!

  " Amount of token withdrawn in native units "
  amount: BigInt!

  #" Amount of token withdrawn in USD "
  #amountUSD: BigDecimal!

  #" The vault involving this transaction "
  #vault: Vault!

  " The strategy this deposit belongs to "
  strategy: Strategy!
}

type Vault @entity {
  " Address of the vault "
  id: ID!
}
